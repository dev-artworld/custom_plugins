<?php
if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

// div for divider.
// <div class="main-section-divider"></div>

class AwAjax {
	public static function getMainSection(){
		echo AwComponents::getMainSection();
		die();
	}

	public static function getInnerMainSection(){
		$selectedoption = $_POST['selectedoption'];

		AwComponents::$selectedoption = $selectedoption;
		echo AwComponents::getInnerMainSection();
		die();
	}

	public static function getAreaSelect(){
		$itemtype = $_POST['itemtype'];
		echo AwComponents::getArea($itemtype);
		die();
	}

	/*funtion to get areas */
	public static function getAreaSection(){
		$areaType  	= trim($_POST['area_type']);
		$areaType  	= str_replace(" ", "_", $areaType);
		$areaType 	= strtolower($areaType);

		// floor
		// tub_shower
		// shower
		// shower_floor
		// drop_in_tub
		// wainscot
		// backsplash
		// fireplace

		switch ($areaType) {
			case 'floor':
				echo AwComponents::getFloorHeader();
				break;

			case 'tub_shower':
				echo AwComponents::getTubShower();
				break;

			case 'shower':
				echo AwComponents::getShower();
				break;

			case 'shower_floor':
				echo AwComponents::getFloorHeader();
				break;

			case 'drop_in_tub':
				echo AwComponents::getTubShower();
				break;

			case 'wainscot':
				echo AwComponents::getTubShower();
				break;

			case 'backsplash':
				echo AwComponents::getBacksplash();
				break;

			case 'fireplace':
				echo AwComponents::getFireplace();
				break;

			default:
				echo '<div class="area-wrapper"><div class="row-wrapper"><div class="col-1"><div class="select-room-row"> <h1> Selected: '.$areaType.' </h1> </div></div><div class="clear"></div></div></div>';
				break;
		}

		die();
	}

	public static function getFloorSection(){
		echo AwComponents::getFloor();
		die();
	}

	public static function saveProject(){
	 $projectcreator = 	$_POST['projectcreator'];

		$project = array();
		$area    = array();
		$room    = array();
		$section = array();

	   foreach($projectcreator as $creators){
	   		global $wpdb;

			$name 		   		= $creators['name'];
			$value 		   		= $creators['value'];
			$projectDID 		= $creators['projectID'];
			$projectName 		= $creators['projectName'];
			$projectLocation 	= $creators['projectLocation'];
			$roomDID    		= $creators['roomID'];
			$areaDID    		= $creators['areaID'];
			$sectionDID 		= $creators['sectionID'];


/* for the project table*/
            if($name == 'projectDivID'){
                $project_found = array_search($project,$value);

	            if($project_found == null){
	                array_push($project, $value);
	            }
                $currentUserId  = get_current_user_id();
                $projectQueries =  "SELECT `divID` FROM projects WHERE divID='".$value."'";
                $projectQuerie  = $wpdb->get_results($projectQueries, OBJECT);
                if(empty($projectQuerie)){
                    $wpdb->insert('projects', array(
					    'user_ID'    => $currentUserId,
					    'divID'      => $value,
					    'location'   => $projectLocation,
					    'name'       => $projectName,// ... and so on
					));
			      }
            } //end of if

			/* for the room table*/
            if( $name == 'roomTypeID' ) {
              	$room_found = array_search($room,$value);

	            if($room_found == null){
	                array_push($room, $value);
	            }

				$query = "SELECT `projectID` FROM projects WHERE divID='".$project[0]."'";
				$projectIDt = $wpdb->get_results($query, OBJECT);
                $currentProjectId = $projectIDt[0]->projectID;

                $roomQueries =  "SELECT `divID` FROM rooms WHERE divID='".$value."'";
                $roomQuerie  = $wpdb->get_results($roomQueries, OBJECT);
                if(empty($roomQuerie)){
	                 $wpdb->insert('rooms', array(
					    'project_ID' => $currentProjectId,
					    'divID'      => $value,
				    ));
                }
            } //end of if

			/* for the area table*/
            if($name == 'areaTypeID'){
                 $area_found = array_search($area,$value);

                if($area_found == null){
	                array_push($area, $value);
	            }

	            foreach($room as $roomvalue){
				    $query   = "SELECT `roomID` FROM rooms WHERE divID = '".$roomvalue."'";
				    $roomIDd = $wpdb->get_results($query, OBJECT);
				}

			    $query            = "SELECT `projectID` FROM projects WHERE divID = '".$project[0]."'";
			    $projectIDt       = $wpdb->get_results($query, OBJECT);
			    $currentProjectId = $projectIDt[0]->projectID;

                    //$currentProjectId = $projectIDt[0]->projectID;
                $areaQueries =  "SELECT `divID` FROM areas WHERE divID='".$value."'";
                $areaQuerie  = $wpdb->get_results($areaQueries, OBJECT);
                if(empty($areaQuerie)){ 

		            foreach($roomIDd as $roomIDds){
			            $wpdb->insert('areas', array(
						    'project_ID' => $currentProjectId,
						    'room_ID'    => $roomIDds->roomID,
						    'roomType'   => 'roomType',
						    'areaType'   => 'areaType',
						    'divID'      => $value
						));
					}
			    }
            } //end of if

			/* for the section table*/
            if( $name == 'sectionTypeID') {
                $section_found = array_search($section,$value);
               	if($section_found == null){
                	array_push($section, $value);
               	}

               	foreach($room as $roomvalue){
                	$query = "SELECT `roomID` FROM rooms WHERE divID='".$roomvalue."'";
			    	$roomIDd = $wpdb->get_results($query, OBJECT);
               	}

	            foreach($area as $areavalue){
					$query = "SELECT `areaID` FROM areas WHERE divID='".$areavalue."'";
				    $areaIDd = $wpdb->get_results($query, OBJECT);
				}
                
                $sectionQueries =  "SELECT `divID` FROM sections WHERE divID='".$value."'";
                $sectionQuerie  = $wpdb->get_results($sectionQueries, OBJECT);
                if(empty($sectionQuerie)){ 

	               	foreach($roomIDd as $roomIDds){
						foreach($areaIDd as $areaIDds){
							$wpdb->insert('sections', array(
								'room_ID' => $roomIDds->roomID,
								'area_ID' => $areaIDds->areaID,
								'divID'   => $value,
							));
						}
				    }
			     }

            } //end of if
			/* for the section-meta table*/
            $args = array(
				'section_ID'    => 1,
				'section_key'   => $name,
				'section_value' => $value,
				'projectDID'    => $projectDID,
				'roomDID'       => $roomDID,
				'areaDID'       => $areaDID,
				'sectionDID'    => $sectionDID,
			);

			$wpdb->insert('section_meta', $args);
	    }

	    echo 'save';
		die();
	}


	public static function getBrandSection(){

		echo AwComponents::getBrand();
		die();
		

	}


	public static function getPatternSection(){

		echo AwComponents::getPattern();
		die();
		

	}

	public static function getTransitionsSection(){

		echo AwComponents::getTransitions();
		die();
		

	}

	public static function getThinsetSection(){

		echo AwComponents::getThinset();
		die();
		

	}

	public static function getProjectSectionData(){

		echo AwComponents::getProjectData();
		die();
		

	}


	/*-----------#Save location ------------*/



	public static function saveLocation(){

		$locationcreator = 	$_POST['locationcreator'];


		//the array of arguements to be inserted with wp_insert_post
		$new_location = array(
		'post_title'    => $locationcreator['lot'],
		
		'post_status'   => 'publish',          
		'post_type'     => 'location' 
		);

		//insert the the post into database by passing $new_post to wp_insert_post
		//store our post ID in a variable $pid
		$pid = wp_insert_post($new_location);

		//we now use $pid (post id) to help add out post meta data

		foreach($locationcreator as $key => $locMeta){

			add_post_meta($pid, $key, $locMeta, true);
		}
		
		echo $pid;


		die();

	}


	/*---------------Get locations list --------*/

	public static function getLocations(){


		echo AwComponents::getLocationsLists();
		die();
		

	}


/* class ends here */
}
?>
